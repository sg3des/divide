// Generated by CoffeeScript 1.7.1
var ajax, check, checktimeout, chis_array, chis_val, clearinput, countdown, create, cval, get, intervalTime, level, loose, maskznam, numpad, point, reducefun, reduceresult, remove, restart, score, scoretime, sendresult, shuffle, slogan, start, startcount, znam_array, znam_val, zval;

znam_val = 0;

chis_val = 0;

cval = [];

zval = [];

znam_array = [];

chis_array = [];

level = 0;

point = 0;

score = 0;

intervalTime = setInterval('', 10000);

checktimeout = setTimeout('', 10000);

slogan = ['get ready, rookie!', 'ho ho ho, are you sure you`re ready?', 'ok, now welcome to the MATHELL!!!', 'Congratulations! you are on the first circle of MATHELL', 'the second circle! tremble!', 'the third circle! so MATHELLISH!', 'the fourth circle! Uhh it has become too hot!', 'the fifth circle! Are you still so sure?', 'the sixth circle! stop until it`s too late', 'the seventh circle! make yourself mathellishly rageful for surviving', 'Guru of the divine perpetuity of MATHELL!', 'MATHELL is just a game made you godlike! HO HO HO!!!'];

startcount = 10;

start = function() {
  var actiondiv, actionval, cmin, content, first, fourth, i, num, second, third, zmax, zmin, _fn, _fn1, _i, _j, _k, _len, _ref, _ref1;
  point = 10;
  scoretime();
  get("content").innerHTML = '';
  get("znamenatel").className = 'input';
  get("znamenatel").value = '';
  get("chislitel").className = 'input';
  get("chislitel").value = '';
  chis_array = [];
  znam_array = [];
  level += 1;
  get('level').innerHTML = level;
  zmin = 4;
  zmax = 10 + level;
  cmin = 2;
  clearInterval(intervalTime);
  intervalTime = setInterval(scoretime, 1000);
  if (level <= 10) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (znam_val - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + 1;
    second = chis_val - first;
    cval = [first, second];
    zval = [znam_val, znam_val];
    actionval = ['+', ''];
  }
  if ((10 < level && level <= 20)) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (znam_val - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + 1;
    second = Math.floor(Math.random() * (first - cmin)) + 1;
    third = chis_val - first - second;
    cval = [first, second, third];
    zval = [znam_val, znam_val, znam_val];
    actionval = ['+', '+', ''];
    shuffle(cval);
  }
  if ((20 < level && level <= 30)) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (zmax - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + 1;
    second = Math.floor(Math.random() * (first - cmin)) + 1;
    third = chis_val - first - second;
    cval = [first, second, third];
    zval = [znam_val, znam_val, znam_val];
    actionval = ['+', '+', ''];
    shuffle(cval);
    reducefun(cval, zval);
  }
  if ((30 < level && level <= 40)) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (zmax - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    second = -Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    third = chis_val - first - second;
    cval = [first, second, third];
    zval = [znam_val, znam_val, znam_val];
    actionval = ['+', '+', ''];
    shuffle(cval);
    reducefun(cval, zval);
    maskznam(cval, zval);
  }
  if ((40 < level && level <= 50)) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (zmax - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    second = -Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    third = -Math.floor(Math.random() * (zmax - chis_val - cmin)) + cmin;
    fourth = chis_val - first - second - third;
    cval = [first, second, third, fourth];
    zval = [znam_val, znam_val, znam_val, znam_val];
    actionval = ['+', '+', '+', ''];
    shuffle(cval);
    reducefun(cval, zval);
    maskznam(cval, zval);
  }
  if (50 < level) {
    znam_val = Math.floor(Math.random() * (zmax - zmin)) + zmin;
    chis_val = Math.floor(Math.random() * (zmax - cmin)) + cmin;
    first = Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    second = -Math.floor(Math.random() * (chis_val - cmin)) + cmin;
    third = -Math.floor(Math.random() * (zmax - chis_val - cmin)) + cmin;
    fourth = chis_val - first - second - third;
    cval = [first, second, third, fourth];
    zval = [znam_val, znam_val, znam_val, znam_val];
    actionval = ['+', '+', '+', ''];
    shuffle(cval);
    reducefun(cval, zval);
    maskznam(cval, zval);
  }
  for (_i = 0, _len = cval.length; _i < _len; _i++) {
    num = cval[_i];
    if (num === 0) {
      return start();
    }
  }
  console.log(chis_val, znam_val);
  get('slogan').innerHTML = slogan[Math.floor(level / 10)];
  content = get("content");
  actiondiv = create('actiondiv', '');
  content.appendChild(actiondiv);
  reduceresult(chis_val, znam_val);
  _fn = function(i) {
    var action;
    if (cval[i] < 0) {
      actionval[i] = "-";
    }
    action = create('action', actionval[i]);
    return actiondiv.appendChild(action);
  };
  for (i = _j = 0, _ref = actionval.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
    _fn(i);
  }
  _fn1 = function(i) {
    var c1, column, z1;
    if (cval[i] < 0) {
      cval[i] = -cval[i];
    }
    column = create('column', '');
    c1 = create('input', cval[i]);
    z1 = create('input', zval[i]);
    content.appendChild(column);
    column.appendChild(c1);
    return column.appendChild(z1);
  };
  for (i = _k = 0, _ref1 = cval.length; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
    _fn1(i);
  }
};

maskznam = function(cval, zval) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = cval.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push((function(i) {
      if (zval[i] === znam_val) {
        zval[i] = zval[i] * Math.floor(level / 20);
        cval[i] = cval[i] * Math.floor(level / 20);
      }
    })(i));
  }
  return _results;
};

scoretime = function() {
  get('point').innerHTML = point -= 1;
  get('time').innerHTML = parseInt(get('time').innerHTML) + 1;
  if (0 >= parseInt(get('score').innerHTML) + point) {
    return loose();
  }
};

loose = function() {
  clearInterval(intervalTime);
  get('loose').className = 'loose1';
  get('totalscore').innerHTML = get('time').innerHTML;
  return get('totallevel').innerHTML = get('level').innerHTML;
};

reducefun = function(cval, zval) {
  var i, _i, _ref, _results;
  _results = [];
  for (i = _i = 0, _ref = cval.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    _results.push((function(i) {
      var result;
      result = reduce(cval[i], zval[i]);
      cval[i] = result[0];
      zval[i] = result[1];
    })(i));
  }
  return _results;
};

restart = function() {
  var sendimg;
  get('time').innerHTML = 0;
  get('score').innerHTML = 0;
  get('loose').className = 'loose';
  get('count').className = 'count';
  get('yellowstick').className = 'yellowstick';
  sendimg = document.createElement("div");
  sendimg.className = 'send';
  sendimg.id = 'send';
  sendimg.onclick = 'sendresult()';
  get('loose').appendChild(sendimg);
  znam_val = 0;
  chis_val = 0;
  cval = [];
  zval = [];
  level = 0;
  point = 0;
  score = 0;
  return countdown();
};

ajax = function(sendarray, url, resid) {
  xmlhttp;
  var xmlhttp;
  if (window.XMLHttpRequest) {
    xmlhttp = new XMLHttpRequest();
  } else {
    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
  }
  xmlhttp.open("POST", url);
  xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xmlhttp.send(sendarray);
  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState === 4 && xmlhttp.status === 200) {
      get(resid).innerHTML = xmlhttp.responseText;
    }
  };
};

sendresult = function() {
  var name, sendarray, totallevel, totalscore, url;
  name = get('yourname').value;
  totallevel = get('totallevel').innerHTML;
  totalscore = get('totalscore').innerHTML;
  sendarray = 'name=' + name + '&level=' + totallevel + '&score=' + totalscore;
  url = 'drobs/create';
  ajax(sendarray, url, 'users');
  remove('send');
};

remove = function(id) {
  var idremove;
  return (idremove = get(id)).parentNode.removeChild(idremove);
};

countdown = function() {
  var count, intervalCount;
  get('count').innerHTML = startcount;
  get('countdown').className = 'countdown';
  count = function() {
    get('count').innerHTML = parseInt(get('count').innerHTML) - 1;
    if (isNaN(get('count').innerHTML)) {
      clearInterval(intervalCount);
      get('countdown').className = 'hide';
      start();
    }
    if (parseInt(get('count').innerHTML) < 1) {
      get('yellowstick').className = 'hide';
      get('count').innerHTML = 'START!!!';
      return get('count').className = 'countstart';
    }
  };
  intervalCount = setInterval(count, 1000);
};

shuffle = function(array) {
  var counter, index, temp;
  counter = array.length;
  index = temp = (function() {
    var _results;
    _results = [];
    while (counter > 0) {
      index = Math.floor(Math.random() * counter);
      counter--;
      temp = array[counter];
      array[counter] = array[index];
      _results.push(array[index] = temp);
    }
    return _results;
  })();
  return array;
};

create = function(className, inner) {
  var div;
  div = document.createElement('div');
  div.className = className;
  div.innerHTML = inner;
  return div;
};

reduceresult = function(chis_val, znam_val) {
  var i, result, _fn, _i;
  result = reduce(chis_val, znam_val);
  _fn = function(i) {
    chis_array.push(result[0] * i);
    return znam_array.push(result[1] * i);
  };
  for (i = _i = 1; _i < 10; i = ++_i) {
    _fn(i);
  }
};

check = function(znam, chis) {
  var checkerror, num, _i, _j, _len, _len1;
  get("chislitel").className = 'input';
  for (_i = 0, _len = chis_array.length; _i < _len; _i++) {
    num = chis_array[_i];
    if (parseInt(chis) === num) {
      get("chislitel").className = 'inputYCorrect';
    }
  }
  if (parseInt(chis) === chis_val) {
    get("chislitel").className = 'inputCorrect';
  }
  get("znamenatel").className = 'input';
  for (_j = 0, _len1 = znam_array.length; _j < _len1; _j++) {
    num = znam_array[_j];
    if (parseInt(znam) === num) {
      get("znamenatel").className = 'inputYCorrect';
    }
  }
  if (parseInt(znam) === znam_val) {
    get("znamenatel").className = 'inputCorrect';
  }
  clearTimeout(checktimeout);
  if (parseInt(znam) === znam_val && parseInt(chis) === chis_val || parseInt(znam) / parseInt(chis) === znam_val / chis_val) {
    clearInterval(intervalTime);
    get('score').innerHTML = parseInt(get('score').innerHTML) + parseInt(get('point').innerHTML);
    setTimeout(start, 500);
    return;
  }
  checkerror = function() {
    if (get("chislitel").className !== 'inputCorrect') {
      get("chislitel").value = '';
      get("chislitel").className = 'inputIncorrect';
    }
    if (get("znamenatel").className !== 'inputCorrect') {
      get("znamenatel").value = '';
      get("znamenatel").className = 'inputIncorrect';
    }
  };
  if (znam.length > 0 && chis.length > 0) {
    checktimeout = setTimeout(checkerror, 1000);
  }
};

numpad = function(val) {
  console.log(val, get("chislitel").className);
  if (get("chislitel").className !== 'inputCorrect') {
    get('chislitel').value = get('chislitel').value + parseInt(val);
  } else {
    get('znamenatel').value = get('znamenatel').value + parseInt(val);
  }
  return check(get("znamenatel").value, get("chislitel").value);
};

clearinput = function(id) {
  get(id).value = '';
  return check(get("znamenatel").value, get("chislitel").value);
};

window.onload = countdown;

get = function(id) {
  return document.getElementById(id);
};
